/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as IndexRouteImport } from './routes/_public/index'
import { Route as MonsterIdRouteImport } from './routes/_public/monster.$id'
import { Route as PublicRegisterRouteImport } from './routes/_public/register'
import { Route as PublicLoginRouteImport } from './routes/_public/login'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedCreateMonsterRouteImport } from './routes/_authenticated/create-monster'

const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MonsterIdRoute = MonsterIdRouteImport.update({
  id: '/monster/$id',
  path: '/monster/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicRegisterRoute = PublicRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PublicLoginRoute = PublicLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => PublicRouteRoute,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedCreateMonsterRoute =
  AuthenticatedCreateMonsterRouteImport.update({
    id: '/create-monster',
    path: '/create-monster',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/create-monster': typeof AuthenticatedCreateMonsterRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/monster/$id': typeof MonsterIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/create-monster': typeof AuthenticatedCreateMonsterRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/login': typeof PublicLoginRoute
  '/register': typeof PublicRegisterRoute
  '/monster/$id': typeof MonsterIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/_authenticated/create-monster': typeof AuthenticatedCreateMonsterRoute
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/register': typeof PublicRegisterRoute
  '/monster/$id': typeof MonsterIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/create-monster'
    | '/profile'
    | '/login'
    | '/register'
    | '/monster/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/create-monster'
    | '/profile'
    | '/login'
    | '/register'
    | '/monster/$id'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_public'
    | '/_authenticated/create-monster'
    | '/_authenticated/profile'
    | '/_public/login'
    | '/_public/register'
    | '/monster/$id'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
  MonsterIdRoute: typeof MonsterIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/monster/$id': {
      id: '/monster/$id'
      path: '/monster/$id'
      fullPath: '/monster/$id'
      preLoaderRoute: typeof MonsterIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/register': {
      id: '/_public/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicRegisterRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/create-monster': {
      id: '/_authenticated/create-monster'
      path: '/create-monster'
      fullPath: '/create-monster'
      preLoaderRoute: typeof AuthenticatedCreateMonsterRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
  }
}

interface AuthenticatedRouteRouteChildren {
  AuthenticatedCreateMonsterRoute: typeof AuthenticatedCreateMonsterRoute
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedCreateMonsterRoute: AuthenticatedCreateMonsterRoute,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

interface PublicRouteRouteChildren {
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegisterRoute: typeof PublicRegisterRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicLoginRoute: PublicLoginRoute,
  PublicRegisterRoute: PublicRegisterRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
  MonsterIdRoute: MonsterIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
